// src/context/AuthContext.js
import React, { createContext, useState, useEffect, useContext } from "react";

// 1Ô∏è‚É£ Context ÏÉùÏÑ±
export const AuthContext = createContext();

// 2Ô∏è‚É£ Provider Ïª¥Ìè¨ÎÑåÌä∏
export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);   // Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
  const [token, setToken] = useState(null); // JWT ÌÜ†ÌÅ∞

  // 3Ô∏è‚É£ Ï¥àÍ∏∞ Î°úÎìú Ïãú localStorageÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    const storedToken = localStorage.getItem("token");
    const storedUser = localStorage.getItem("user");

    if (storedToken && storedUser) {
      setToken(storedToken);
      setUser(JSON.parse(storedUser));
    }
  }, []);

  // 4Ô∏è‚É£ Î°úÍ∑∏Ïù∏ Ìï®Ïàò
  const login = ({ user, token }) => {
    setUser(user);
    setToken(token);

    localStorage.setItem("token", token);
    localStorage.setItem("user", JSON.stringify(user));
  };

  // 5Ô∏è‚É£ Î°úÍ∑∏ÏïÑÏõÉ Ìï®Ïàò
  const logout = () => {
    setUser(null);
    setToken(null);

    localStorage.removeItem("token");
    localStorage.removeItem("user");
  };

  // 6Ô∏è‚É£ Context value Ï†ÑÎã¨
  return (
    <AuthContext.Provider value={{ user, token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

// üîπ 7Ô∏è‚É£ useAuth ÌõÖ Ï∂îÍ∞Ä
export const useAuth = () => useContext(AuthContext);